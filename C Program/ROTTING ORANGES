class Solution {
public:
    bool check(int i,int j,vector<vector<int>>& grid,int timer)
    {
        if(i>=0&&j>=0&&j<grid[0].size()&&i<grid.size()&&(grid[i][j]==1||grid[i][j]<timer))
            return 1;
        return 0;
    }
    void dfs(int i,int j,vector<vector<int>>& grid,int timer)
  {
      grid[i][j]=timer;
      timer--;
       if(check(i-1,j,grid,timer))
       dfs(i-1,j,grid,timer);
       if(check(i+1,j,grid,timer))
       dfs(i+1,j,grid,timer);
       if(check(i,j-1,grid,timer))
       dfs(i,j-1,grid,timer);
       if(check(i,j+1,grid,timer))
       dfs(i,j+1,grid,timer);
       
  }
    int orangesRotting(vector<vector<int>>& grid) {
           for(int i=0;i<grid.size();i++)
           {
               for(int j=0;j<grid[0].size();j++)
               {
                   if(grid[i][j]==2)
                   dfs(i,j,grid,0);
               }
           }
           int  min=0;
            for(int i=0;i<grid.size();i++)
                   {
                   for(int j=0;j<grid[0].size();j++)
               {
                   if(grid[i][j]==1)
                   return -1;
                   //cout<<grid[i][j]<<" ";
                   if(grid[i][j]<min)
               min=grid[i][j];
               }
              // cout<<endl;
                   }
               return -min;
    }
};
